

#include "ioperand.h"
class route : public ioperand {
    struct rtmsg* rt;
    bool create() override {
        std::cout << "route create\n";
        return true;
    }
    void read() override {
        std::cout << "route read\n";
    }

    void remove() override {
        std::cout << "route remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};
#include <linux/rtnetlink.h>

#include "ioperand.h"

class link : public ioperand {
    struct  ifinfomsg *ifi;
    bool create() override {
        std::cout << "Link create\n";
        return true;
    }
    
    void read() override {
        std::cout << "Link read\n";
    }

    void remove() override {
        std::cout << "Link remove\n";
    }

    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
    link() = default;
    ~link() = default;
    private:
};
#include "ioperand.h"


class addr : public ioperand {
    struct ifaddrmsg* ifaddr;
    bool create() override {
        std::cout << "Addr create\n";
        return true;
    }
    void read() override {
        std::cout << "Addr read\n";
    }

    void remove() override {
        std::cout << "addr remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};
#include "ioperand.h"


class neigh : public ioperand {
    struct ndmsg* nd;
    struct nda_cacheinfo* nda_cache;

    bool create() override {
        std::cout << "neigh create\n";
        return true;
    }
    void read() override {
        std::cout << "neigh read\n";
    }

    void remove() override {
        std::cout << "neigh remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};


#include "ioperand.h"

class rule : public ioperand {
    struct tcmsg* tc_msg;

    bool create() override {
        std::cout << "rule create\n";
        return true;
    }
    void read() override {
        std::cout << "rule read\n";
    }

    void remove() override {
        std::cout << "rule remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};


#include "ioperand.h"
class qdisc : public ioperand {
    struct tcmsg* tc_msg;

    bool create() override {
        std::cout << "qdisc create\n";
        return true;
    }
    void read() override {
        std::cout << "qdisc read\n";
    }

    void remove() override {
        std::cout << "qdisc remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};

#include "ioperand.h"

class filter : public ioperand {
    struct tcmsg* tc_msg;

    bool create() override {
        std::cout << "filter create\n";
        return true;
    }
    void read() override {
        std::cout << "filter read\n";
    }

    void remove() override {
        std::cout << "filter remove\n";
    }
    uint8_t* dump(uint8_t* buf) override {
        return buf;
    }
    uint8_t* build(uint8_t* buf) override {
        return buf;
    }
};
